link "cool/library"

namespace Bar
{
interface ITest
{
    func fizz() : i32;
}

class Foo[1k] : ITest // the [1k] gives very instance of Foo 1 kibibytes of stackbased internal heap i.e. object memory
{
    public
    {
        i32 int_value = 69;
        u8 uint_value = 42;
        d64 decimal64_value = 420.69d;
        str string_value = f"{int_value}hahaha";

        bool[10] bool_array = {false};

        ?i8 this_might_be_error; // this can be either i8 or error value

        func fizz() : i32
        {
            Tazz tazz_obj = new Tazz(); // uses object memory to dynamically allocate an instance of Tazz

            i32 buzz_val = reterr tazz_obj.buzz(); // escalates the error if error

            u16 izz_val = tazz_obj.izz() onerr // in place error handling
            {
                Tazz::izza_err:
                    return 0; // function will return 0
                Tazz::bar_err:
                    assign 1; // izz_val is assigned 1
                default:
                    reterr error_a; // function returns error_a
            }

            ?d32 bzz_val = tazz_obj.bzz();
            if (!iserr bzz_val)
            {
                // do stuff if bzz_val was no error
            }
            else
            {
                // do stuff if bzz_was an error
            }

            loop(true){}

            loop (i2 bla : blas){}
            
            loop (i32 i = 0; i < 10; i++){}
        }

        func noerr does_not_ret_err() : bool
        {
            // this function is gurenteed to not return an error
        }

        func this_returns_error_a() : i32
        {
            reterr error_a;
        }
    }

    private
    {
        !u16 mutable_uint = 10;
        ?str errable_string = error_b;
    }

    error
    {
        [error_a, "This is the a error"],
        [error_b, "This is the b error"]
    }
}


// just an idea:
class Human {
  public {
    func get_name() : str { return name; }
    func get_addr() : str { return addr; }
  }
  private {
    str name;
    str addr;
  }
}

class Artist {
  public {
    func get_name() : str { return name; }
    func how_many_releases() : u32 { return releases; }
  }

  private {
    str name;
    u32 releases;
  }
}

composition Performer(Human, Artist) {
  assign get_legal_name() = Human::get_name();
  assign get_artist_name() = Artist::get_name();
  // how_many_releases doesn't need to be assigned because there is no name confilit
}
}
